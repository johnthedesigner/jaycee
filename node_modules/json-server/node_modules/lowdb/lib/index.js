'use strict';

var lodash = require('lodash');
var isPromise = require('is-promise');
var defaultStorage = require('./file-sync');

var defaultOptions = {
  storage: defaultStorage,
  writeOnChange: true
};

function low(source) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? defaultOptions : arguments[1];

  // Create a fresh copy of lodash
  var _ = lodash.runInContext();

  var db = _.chain({});

  if (source) {
    if (options.storage) {
      (function () {
        var storage = options.storage;


        if (storage.read) {
          db.read = function () {
            var s = arguments.length <= 0 || arguments[0] === undefined ? source : arguments[0];

            var res = storage.read(s, db.deserialize);
            var init = function init(obj) {
              db.__wrapped__ = obj;
              db._checksum = JSON.stringify(db.__wrapped__);
            };

            if (isPromise(res)) {
              return res.then(function (obj) {
                init(obj);
                return db;
              });
            }

            init(res);
            return db;
          };
        }

        if (storage.write) {
          db.write = function () {
            var dest = arguments.length <= 0 || arguments[0] === undefined ? source : arguments[0];
            return storage.write(dest, db.__wrapped__, db.serialize);
          };
        }
      })();
    }

    if (options.format) {
      var format = options.format;

      db.serialize = format.serialize;
      db.deserialize = format.deserialize;
    }
  }

  // Modify value function to call save before returning result
  _.prototype.value = _.wrap(_.prototype.value, function (value) {
    var v = value.apply(this);

    if (db.source && db.write && options.writeOnChange) {
      var str = JSON.stringify(db.__wrapped__);

      if (str !== db._checksum) {
        db._checksum = str;
        db.write(db.source, db.__wrapped__);
      }
    }

    return v;
  });

  // Get or set database state
  db.state = function (obj) {
    if (obj) {
      db.__wrapped__ = obj;
    } else {
      return db.__wrapped__;
    }
  };

  db._ = _;
  db.source = source;

  // Read
  if (db.read) {
    return db.read();
  } else {
    return db;
  }
}

module.exports = low;